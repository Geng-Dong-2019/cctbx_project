import libtbx.load_env
import os

from libtbx.env_config import get_boost_library_with_python_version

Import("env_base", "env_etc")

env_etc.simtbx_dist = libtbx.env.dist_path("simtbx")
env_etc.simtbx_include = os.path.dirname(env_etc.simtbx_dist)
env_etc.simtbx_common_includes = [
  env_etc.libtbx_include,
  env_etc.scitbx_include,
  env_etc.simtbx_include,
  env_etc.boost_adaptbx_include,
  env_etc.boost_include,
  os.path.dirname(libtbx.env.find_in_repositories(
    relative_path="tbxx", optional=False)),
  env_etc.dxtbx_include,
]

if not env_etc.no_boost_python:
  Import("env_no_includes_boost_python_ext")
  env_simtbx = env_no_includes_boost_python_ext.Clone()

  env_etc.include_registry.append(
    env=env_simtbx,
    paths=env_etc.simtbx_common_includes + [env_etc.python_include])
  env_simtbx.Append(LIBS=env_etc.libm +
    ["scitbx_boost_python",
     get_boost_library_with_python_version("boost_python", env_simtbx['LIBPATH']),
     "cctbx"])

  env_etc.enable_more_warnings(env=env_simtbx)
  # env_simtbx.SConscript("nanoBragg/SConscript",exports={ 'env' : env_simtbx })
  # env_simtbx.SConscript("gpu/SConscript",exports={ 'env' : env_simtbx })

  # build one shared library with device code
  # nanoBragg
  nanoBragg_cuda_src = ['nanoBragg/nanoBraggCUDA.cu']

  # gpu
  gpu_cuda_src = ["gpu/structure_factors.cu",
                  "gpu/detector.cu",
                  "gpu/simulation.cu"]

  env_cuda = env_simtbx.Clone()
  env_cuda.Prepend(CPPDEFINES=["NANOBRAGG_HAVE_CUDA"])
  env_cuda.Prepend(NVCCFLAGS=["-DCUDAREAL=double",
                              "-DNANOBRAGG_HAVE_CUDA",
                              "-DHAVE_NANOBRAGG_SPOTS_CUDA"])
  env_cuda.Append(LIBS=["cuda", "cudart", "cudadevrt"])

  cuda_src = nanoBragg_cuda_src + gpu_cuda_src

  # combined cuda device code object
  cuda_obj = env_cuda.cudaSharedDeviceObject(
    target = "simtbx_cuda",
    source = cuda_src)

  # static library with device code
  # cuda_lib = env_cuda.cudaStaticLibrary(
  #   target = "#lib/libsimtbx_cuda",
  #   source = cuda_obj)

  # build nanoBragg extension
  env_simtbx = env_cuda
  env_simtbx.Prepend(CPPDEFINES=["NANOBRAGG_HAVE_CUDA"])
  env_simtbx.Prepend(CPPFLAGS=["-DCUDAREAL=double",
                               "-DNANOBRAGG_HAVE_CUDA",
                               "-DHAVE_NANOBRAGG_SPOTS_CUDA"])
  env_simtbx.Prepend(LIBS=["omptbx"])

  nanoBragg_ext_src = [
    "nanoBragg/nanoBragg_ext.cpp",
    "nanoBragg/nanoBragg.cpp",
    "nanoBragg/nanoBragg_nks.cpp",
    "nanoBragg/nanoBragg_cuda.cpp"
  ]

  env_simtbx['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = 1
  env_simtbx.cudaSharedLibrary(
    target="#lib/simtbx_nanoBragg_ext",
    source=nanoBragg_ext_src + [cuda_obj])

  # build gpu extension
  gpu_ext_src = ["gpu/gpu_ext.cpp"]
  env_simtbx.cudaSharedLibrary(
    target="#lib/simtbx_gpu_ext",
    source=gpu_ext_src + [cuda_obj])
